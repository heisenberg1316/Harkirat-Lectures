// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator client_edge {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client/edge"
}

datasource db {
  provider = "postgresql"
  url      = env("ACCELERATE_URL")
  
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String
  bio             String
  password        String
  blogs           Blog[]   // blogs written by user
  imageLink       String
  updatedCount    Int      @default(0)
  lastUpdateDate  DateTime?
  createdAt       DateTime @default(now())
  
  // Upvotes relation
  upvotedBlogs    Blog[]   @relation("Upvotes")

  // Followers/following
  followers       Follower[] @relation("FollowedUser")
  following       Follower[] @relation("FollowingUser")

  // Profile views relations
  profileViewers  ProfileView[] @relation("ViewedUserRelation") // people who viewed this user
  profilesViewed  ProfileView[] @relation("ViewerRelation")     // profiles this user viewed

  profileViews    Int      @default(0) // total views count
}


model Blog {
  id        String  @id @default(uuid())
  title     String
  content   String
  published Boolean @default(false)
  upvotes   Int      @default(0)         // new field for upvotes
  author    User @relation(fields : [authorId], references: [id])
  authorId  String
  tags      Tag[]    @relation("BlogTags") // âœ… connect to many tags
  createdAt DateTime @default(now())
  imageLink String @default("https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png?20210521171500")
  upvotedBy User[]  @relation("Upvotes")
}


model Tag {
  id    String  @id @default(uuid())    // unique ID
  name  String  @unique                 // tag name like 'cricket', 'coding'
  blogs Blog[]  @relation("BlogTags")   // link to many blogs
}

model Follower {
  id            String   @id @default(uuid())
  follower      User     @relation("FollowingUser", fields: [followerId], references: [id])
  followerId    String
  followed      User     @relation("FollowedUser", fields: [followedId], references: [id])
  followedId    String
  createdAt     DateTime @default(now())

  @@unique([followerId, followedId]) // prevent duplicate follows
}


model ProfileView {
  id           String   @id @default(uuid())

  viewer       User     @relation("ViewerRelation", fields: [viewerId], references: [id])
  viewerId     String

  viewedUser   User     @relation("ViewedUserRelation", fields: [viewedUserId], references: [id])
  viewedUserId String

  viewedAt     DateTime @default(now())
}
